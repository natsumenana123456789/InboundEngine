name: 🤖 Auto Post Bot with Scheduler

on:
  # スケジュール実行
  schedule:
    # 毎朝8時にスケジュール生成（JST）
    - cron: '0 23 * * *'  # UTC 23:00 = JST 8:00
    # 毎日10時、14時、18時、21時に投稿実行（JST）
    - cron: '0 1,5,9,12 * * *'  # UTC 1,5,9,12 = JST 10,14,18,21
  
  # Git push時の通知
  push:
    branches: [ main ]
  
  # 手動実行
  workflow_dispatch:
    inputs:
      action:
        description: '実行するアクション (schedule | schedule-now | post)'
        required: true
        default: 'post'
        type: choice
        options:
          - post
          - schedule
          - schedule-now

jobs:
  # Git push時のDiscord通知
  notify-update:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 # checkoutのバージョンをv4に更新
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # バージョン統一
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # この通知スクリプトのパスと動作は現状維持。問題があれば別途修正。
    - name: 📢 Discord Push通知
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        python bots/auto_post_bot/discord_notifier.py --type push \
          --repo "${{ github.repository }}" \
          --commit "${{ github.event.head_commit.message }}" \
          --author "${{ github.event.head_commit.author.name }}" \
          --branch "${{ github.ref_name }}"

  # スケジュール生成ジョブ
  schedule:
    if: github.event.schedule == '0 23 * * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'schedule')
    runs-on: ubuntu-latest
    steps:
    - name: 📁 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # バージョン統一
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Create config files from template
      env:
        # --- ここに config/generate_config.py が必要とする全てのsecretsを環境変数として定義 ---
        # 例: (実際のsecrets名はリポジトリに合わせてください)
        # ACCOUNT1_CONSUMER_KEY: ${{ secrets.ACCOUNT1_CONSUMER_KEY }}
        # ACCOUNT1_CONSUMER_SECRET: ${{ secrets.ACCOUNT1_CONSUMER_SECRET }}
        # ACCOUNT1_ACCESS_TOKEN: ${{ secrets.ACCOUNT1_ACCESS_TOKEN }}
        # ACCOUNT1_ACCESS_TOKEN_SECRET: ${{ secrets.ACCOUNT1_ACCESS_TOKEN_SECRET }}
        # ACCOUNT1_BEARER_TOKEN: ${{ secrets.ACCOUNT1_BEARER_TOKEN }} # Optional
        # ACCOUNT2_CONSUMER_KEY: ${{ secrets.ACCOUNT2_CONSUMER_KEY }}
        # ... 他のアカウントや共通のsecretも同様に ...
        DISCORD_WEBHOOK_URL_SECRET: ${{ secrets.DISCORD_WEBHOOK_URL }} # generate_config.py側での参照名に合わせる
        GOOGLE_SHEETS_KEY_JSON_SECRET: ${{ secrets.GOOGLE_SHEETS_KEY }} # JSON文字列をそのまま渡す
        # --- ここまで secrets 定義 ---
      run: |
        mkdir -p config logs
        python config/generate_config.py # このスクリプトが config/config.yml と config/gspread-key.json を生成する
        
    - name: 📅 Generate schedule
      run: python main.py --generate-schedule --date $(TZ='Asia/Tokyo' date +%Y-%m-%d)

  # 現在時刻からスケジュール生成ジョブ (手動実行用)
  schedule-now:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'schedule-now'
    runs-on: ubuntu-latest
    steps:
    - name: 📁 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # バージョン統一
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Create config files from template
      env:
        # --- 同様に、必要な全てのsecretsを環境変数として定義 ---
        # ACCOUNT1_CONSUMER_KEY: ${{ secrets.ACCOUNT1_CONSUMER_KEY }}
        # ...
        DISCORD_WEBHOOK_URL_SECRET: ${{ secrets.DISCORD_WEBHOOK_URL }}
        GOOGLE_SHEETS_KEY_JSON_SECRET: ${{ secrets.GOOGLE_SHEETS_KEY }}
        # ---
      run: |
        mkdir -p config logs
        python config/generate_config.py
        
    - name: ⏰ Generate schedule from current time (force regenerate)
      run: python main.py --generate-schedule --date $(TZ='Asia/Tokyo' date +%Y-%m-%d) --force-regenerate

  # 投稿実行ジョブ
  post:
    # cronトリガーが schedule ジョブと被らないように条件を調整
    # '0 23 * * *' 以外、または手動実行で action == 'post' の場合
    if: (github.event.schedule != '0 23 * * *' && github.event.schedule != '') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'post')
    runs-on: ubuntu-latest
    steps:
    - name: 📁 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # バージョン統一
        
    - name: 🎬 Install FFmpeg
      run: sudo apt-get update && sudo apt-get install -y ffmpeg
      
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Create config files from template
      env:
        # --- 同様に、必要な全てのsecretsを環境変数として定義 ---
        # ACCOUNT1_CONSUMER_KEY: ${{ secrets.ACCOUNT1_CONSUMER_KEY }}
        # ...
        DISCORD_WEBHOOK_URL_SECRET: ${{ secrets.DISCORD_WEBHOOK_URL }}
        GOOGLE_SHEETS_KEY_JSON_SECRET: ${{ secrets.GOOGLE_SHEETS_KEY }}
        # ---
      run: |
        mkdir -p config logs
        python config/generate_config.py
        
    - name: 🤖 Run auto post
      run: python main.py --process-now --date $(TZ='Asia/Tokyo' date +%Y-%m-%d)
